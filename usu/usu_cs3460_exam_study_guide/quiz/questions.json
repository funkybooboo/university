{
  "q1": {
    "prompt": "Who, of the following names, is the originator of the C++ language (not C, but C++).",
    "answer": ["Bjarne Stroustrup"],
    "distractors": ["Ken Thompson", "Scott Meyers", "John Carmack", "Dennis Ritchie", "Linux Torvalds"]
  },
  "q2": {
    "prompt": "All valid C code is also valid C++ code.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q3": {
    "prompt": "Which of the following are valid signatures for the entry point of a C++ program (select all that apply).  By valid, one that results in no compiler errors or warnings.",
    "answer": ["int main()", "int main(int argc, char* argv[])"],
    "distractors": ["int main(double argc)", "int main(char* argv[], int argc)"]
  },
  "q4": {
    "prompt": "Which of the following are valid C++ data types (select all that apply).",
    "answer": ["int", "float", "long int", "unsigned int", "bool"],
    "distractors": ["unsigned float", "boolean", "long bool"]
  },
  "q5": {
    "prompt": "double value = 12345.678;\n\nGiven the above declaration of a double value, which of the following is the correct way to type-cast a double to an int?",
    "answer": ["int truncated = static_cast<int>(value);"],
    "distractors": ["int truncated = const_cast<int>(value);", "int truncated = dynamic_cast<int>(value);", "int truncated = reinterpret_cast<int>(value);"]
  },
  "q6": {
    "prompt": "From an std::string_view, it is possible to modify the value of the referenced string.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q7": {
    "prompt": "decltype might use the right-hand side of the expression to help infer the data type.",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q8": {
    "prompt": "auto one = 1;\n\nMatch the types with the automatic type inference statements.",
    "answer": ["int"],
    "distractors": ["double", "char* (a c-string)", "std::initializer_list", "bool", "int[4]", "std::string", "char", "float"]
  },
  "q9": {
    "prompt": "auto twoptwo = 2.2;\n\nMatch the types with the automatic type inference statements.",
    "answer": ["double"],
    "distractors": ["int", "char* (a c-string)", "std::initializer_list", "bool", "int[4]", "std::string", "char", "float"]
  },
  "q10": {
    "prompt": "auto place = \"Logan\";\n\nMatch the types with the automatic type inference statements.",
    "answer": ["char* (a c-string)"],
    "distractors": ["int", "double", "std::initializer_list", "bool", "int[4]", "std::string", "char", "float"]
  },
  "q11": {
    "prompt": "auto evens = { 2, 4, 6, 8 };\n\nMatch the types with the automatic type inference statements.",
    "answer": ["std::initializer_list"],
    "distractors": ["int", "double", "char* (a c-string)", "bool", "int[4]", "std::string", "char", "float"]
  },
  "q12": {
    "prompt": "int a = 4;\n\nGiven the following code, which of the following are correct C++ statements (select all that apply).",
    "answer": ["decltype(auto) c = a;", "decltype(auto) d = (a);", "auto e = a;", "decltype(a) b = a;"],
    "distractors": ["auto f = decltype(a);", "auto(decltype) g = a;", "decltype(int) h = a;"]
  },
  "q13": {
    "prompt": "auto evens = { 2, 4, 6, 8 };\n\nWhat is the inferred type for the following statement:",
    "answer": ["std::initializer_list"],
    "distractors": ["reference to an array", "int[4]", "std::vector<int>", "This is invalid C++ code"]
  },
  "q14": {
    "prompt": "It is necessary to specify in the CMakeLists.txt file which platforms (OS & toolset combination) it can be used for.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q15": {
    "prompt": "The use of clang-format is better than requiring developers to manually format code",
    "answer": ["Yes"],
    "distractors": ["No"]
  },
  "q16": {
    "prompt": "The cmake_minimum_required(...) statement is required in the CMakeLists.txt file",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q17": {
    "prompt": "Which of the following are valid C++ array declarations (select all that apply).",
    "answer": ["std::vector<int> a2{ 2, 3, 5, 7 };", "int a1[] = { 2, 3, 5, 7 };"],
    "distractors": ["std::array<int> a4 = { 2, 3, 5, 7 };", "std::vector<int, 4> a3 = { 2, 3, 5, 7 };"]
  },
  "q18": {
    "prompt": "An std::random_device should be used to seed a \"random engine\", assuming you want the \"random engine\" to produce a different sequence of numbers each time.",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q19": {
    "prompt": "A \"random engine\" might use a hardware component on the computer as the source it uses to generate random numbers.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q20": {
    "prompt": "C++ reference types are pretty similar to Java references, the difference being that C++ references have the actual memory location stored in them, while Java references have a numeric lookup value the JVM uses to lookup the actual memory location of the object. ",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q21": {
    "prompt": "Consider the following code...\n\nvoid doSomething(int& x, int& y)\n{\n   // the code does something with x and y\n}\n\nWhich of the following are valid calls to this function (select all that apply). You may assume any variables used in the calls are of the correct type and have previously been declared.",
    "answer": ["doSomething(a, b);"],
    "distractors": ["doSomething(8, 6);", "doSomething(&a, &b);", "doSomething(a, 6);"]
  },
  "q22": {
    "prompt": "The following code demonstrates a valid if statement.\n\n#include <iostream>\n\nint getUserInput() {\n    //...pretend user input happens here\n    return 4;\n}\n\nint main()\n{\n    if (auto input = getUserInput(); input > 2 && input < 8) {\n        std::cout << \"The user selected something greater than 2 and less than 8\" << std::endl;\n    }\n\n    return 0;\n}",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q23": {
    "prompt": "The following shows how to correctly define and then use a Google Test, Test Suite.\n\nTEST_SUITE(Suite1);\n\nTEST(Suite1)\n{\n...some testing code goes here...\n}",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q24": {
    "prompt": "For Google Test, the difference between EXPECT_NEAR and ASSERT_NEAR is the number of digits of precision accepted for a computed value to be equal to the expected value.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q25": {
    "prompt": "A std::chrono::duration is composed of both a (time) period and a count, where the count is the number of periods represented by the duration.",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q26": {
    "prompt": "The period used in a std::chrono duration is...",
    "answer": ["a fraction relative to a second"],
    "distractors": ["a fraction relative to one millisecond", "a fraction relative to one nanosecond", "a unitless fraction"]
  },
  "q27": {
    "prompt": "Given the following function prototype...\n\nvoid doSomething(std::shared_ptr<TestObject> p);\n\nWhen the function is called, a copy of TestObject is made.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q28": {
    "prompt": " C++ requires header files have the extension .hpp ",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q29": {
    "prompt": "Is the following valid code...\n\n    std::string s = \"This is a string\";\n    std::string_view v = s;\n    v[0] = 't';\n    std::cout << v << std::endl;",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q30": {
    "prompt": "The use of double quotes \"\" in an #include statement tells the preprocessor to first look for the header file in the project defined folders (or possibly just the current folder).",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q31": {
    "prompt": "C++ requires all implementations of a class's methods are provided in one .cpp file.",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q32": {
    "prompt": "Separate compilation is the concept that type and definition code are placed in separate files (header and implementation files respectively), having the definition compiled one time, and the type information used and compiled only where/as needed.",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q33": {
    "prompt": "Assuming the existence of the getNextPrime function, would you expect this function to result in a reliable program?\n\nint* generate10Primes()\n{\n    int primes[10];\n    primes[0] = 1;\n    \n    for (int i = 1; i < 10; i++)\n    {\n        primes[i] = getNextPrime(primes[i - 1]);\n    }\n    \n    return primes;\n}",
    "answer": ["False"],
    "distractors": ["True"]
  },
  "q34": {
    "prompt": "A std::chrono::duration is composed of both a (time) period and a count, where the count is the number of periods represented by the duration.",
    "answer": ["True"],
    "distractors": ["False"]
  },
  "q35": {
    "prompt": "What is the default value for (uninitialized) primitive numeric types (e.g., int, double) in C++.",
    "answer": ["no default is specified"],
    "distractors": ["the largest possible positive value of the type", "0", "1", "-1"]
  },
  "q36": {
    "prompt": "Given the following code, select the true statement.\n\n#include <iostream>\n#include <memory>\n\nclass Monster\n{\n    public:\n        int health{ 100 };\n};\n\nclass Hero\n{\n    public:\n        int health{ 100 };\n};\n\nint main()\n{\n    Monster* enemies = new Monster[10];\n    std::shared_ptr<Hero[]> heros = std::make_shared<Hero[]>(10);\n    \n    std::cout << enemies[0].health << std::endl;\n    std::cout << heros[0].health << std::endl;\n\n    delete[] enemies;\n    \n    return 0;\n}",
    "answer": ["The code compiles and runs correctly."],
    "distractors": ["The code compiles, but an exception occurs when reporting the health of the hero.", "The code does not compile because the -> operator should be used on the enemies array.", "The code compiles and runs correctly.", "The code compiles, but an exception occurs when reporting the health of the enemy."]
  },
  "q37": {
    "prompt": "Which of the following is a strongly typed, or scoped, enumeration.",
    "answer": ["enum class State {};"],
    "distractors": ["enum State : unsigned int {};", "enum State {};", "enum scope State {};"]
  },
  "q38": {
    "prompt": "Which of the following attributes is recommended to use in a switch case statement you intend for execution to continue to the next case statement.",
    "answer": ["[[fallthrough]]"],
    "distractors": ["[[noreturn]]", "[[nodiscard]]", "[[nobreak]]", "[[continue]]"]
  },
  "q39": {
    "prompt": "Which of the following is a correct way to declare a constant in C++.",
    "answer": ["const double PI = 3.14159;"],
    "distractors": ["final double PI = 3.14159;", "readonly double PI = 3.14159;", "#define PI = 3.14159;"]
  },
  "q40": {
    "prompt": "If not specified, the default visibility within a class is...",
    "answer": ["private"],
    "distractors": ["protected", "internal", "namespace public", "public"]
  },
  "q41": {
    "prompt": "What is the type of primes, in the statement below?\n\nauto primes = { 2, 3, 5, 7 };",
    "answer": ["std::initializer_list of ints"],
    "distractors": ["raw array of ints: int[4]", "type inference fails for this statement", "std::array of ints: std::array<int, 4>"]
  },
  "q42": {
    "prompt": "The following is an example of...\n\nSomeClass::SomeClass(std::string param1, int param2, bool param3) :\n   m_field1(param1),\n   m_field2(param2),\n   m_field3(param3)\n{\n}",
    "answer": ["Direct initialization"],
    "distractors": ["Parameter-wise copy", "Data field parameterization", "Initialization by value"]
  },
  "q43": {
    "prompt": "Which of the following characters are used to indicate a preprocessor directive.",
    "answer": ["#"],
    "distractors": ["/*", "$", "//", "@"]
  },
  "q44": {
    "prompt": "Which of the following are true statements about how C++ function/method parameters may be passed.",
    "answer": ["Pass by reference", "Pass by value"],
    "distractors": ["Pass by indirection", "Pass by name"]
  },
  "q45": {
    "prompt": "Given the following code segment, select the true statements about the code; following execution.\n\n    int a = 2;\n    int* b = new int(3);\n    int* c = &a;\n    c = b;\n    *c = 5;\n    *b = 7;",
    "answer": ["The variable 'a' is on the stack.", "The value of 'a' is 2.", "The value pointed to by 'b' is 7."],
    "distractors": ["The variable 'a' is on the heap.", "The value pointed to by 'c' is 5."]
  },
  "q46": {
    "prompt": "Given the following code, select the true statements.\n\n    int empty[4];\n    int primes[4] = {2, 3, 5, 7 };\n    int evens[] { 2, 4, 6, 8 };\n    int* dynPrimes = new int[4] { 2, 3, 5, 7 };",
    "answer": ["The array elements for 'dynPrimes' are on the heap.", "The array elements for 'evens' are on the stack.", "The array elements for 'primes' are on the stack.", "The array elements for 'empty' are on the stack."],
    "distractors": ["The array elements for 'empty' are on the heap.", "The array elements for 'evens' are on the heap.", "The array elements for 'dynPrimes' are on the stack.", "The array elements for 'primes' are on the heap"]
  },
  "q47": {
    "prompt": "Which of the following result in arrays that are ready to use.  In other words, arrays that have a valid declaration and space to store elements.",
    "answer": ["int* primes = new int[4]{ 2, 3, 5, 7 };", "int* primes = new int[4];", "int primes[] = {2, 3, 5, 7 };", "int primes[4];"],
    "distractors": ["int[] primes = { 2, 3, 5, 7 }", "int* primes = new int(4);"]
  },
  "q48": {
    "prompt": "Given the following code, select the statements that will correctly report the speed of 20 to the console.\n\n#include <iostream>\n#include <memory>\n\nclass Ship\n{\n    public:\n        int speed = 20;\n};\n\nint main()\n{\n    auto myShip = std::make_shared<Ship>();\n      \n    return 0;\n}",
    "answer": ["std::cout << (*myShip).speed << std::endl;", "std::cout << myShip->speed << std::endl;"],
    "distractors": ["std::cout << (&myShip)->speed << std::endl;", "std::cout << *myShip.speed << std::endl;", "std::cout << &myShip.speed << std::endl;"]
  },
  "q49": {
    "prompt": "Which of the following is the correct way to define a type alias.",
    "answer": ["using my_string = std::string;"],
    "distractors": ["using std::string = my_string;", "using typedef my_string std::string;", "using { my_string, std::string };"]
  },
  "q50": {
    "prompt": "Given this code segment, which of the following are valid ways to send the value (10) stored in 'a' to the console. (more than one may be correct)\n\nint* a = new int(10);\nint& b = *a;",
    "answer": ["std::cout << *a;", "std::cout << b;"],
    "distractors": ["std::cout << &b;", "std::cout << *b;", "std::cout << &a;", "std::cout << a;"]
  },
  "q51": {
    "prompt": "Given the following function prototype, select the choice(s) that are valid calls to the function; you may assume any variables used in the calls are of type int.\n\nvoid doSomething(int& x, int& y);",
    "answer": ["doSomething(a, b);"],
    "distractors": ["doSomething(1, 2);", "doSomething(nullptr, a);", "doSomething(a, 2);"]
  },
  "q52": {
    "prompt": "Which of the following are valid ways to create an std::vector and/or std::array.",
    "answer": ["std::vector<int> array;", "std::array<int, 4> array;"],
    "distractors": ["std::vector<int> array = new std::vector<int>(4);", "std::array<int,4> array = new std::array<int, 4>();", "std::vector<int, 4> array;", "std::array<int> array;"]
  },
  "q53": {
    "prompt": "Compiler deduction of types can be achieved using which of the following keywords",
    "answer": ["decltype", "auto"],
    "distractors": ["var", "infer", "typeof"]
  },
  "q54": {
    "prompt": "\n\nFor the following code, on the second line, the * character is called what?\n\nint* a = new int(10);\nint b = *a;\n\n",
    "answer": ["Dereference operator"],
    "distractors": [" Reference operator", "Address of (or Address) operator", "Pointer operator"]
  },
  "q55": {
    "prompt": "Which of the following is the correct way to declare and dynamically allocate an array of integers",
    "answer": ["int* data = new int[10];"],
    "distractors": ["int data = new int[10];", "int& data = new int[10];", "int[] data = new int[10];"]
  },
  "q56": {
    "prompt": "\n\nGiven this code segment, which of the following are valid ways send the value (10) stored in 'a' to the console. (more than one may be correct)\n\nint* a = new int(10);\nint*& b = a;\n\n",
    "answer": ["std::cout << *a;", "std::cout << *b;"],
    "distractors": ["std::cout << a;", "std::cout << &a;", "std::cout << b;"]
  },
  "q57": {
    "prompt": "Direct initialization occurs before the body of the constructor executes.",
    "answer": ["True"],
    "distractors": ["False"]
  }
}
