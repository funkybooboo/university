Testing countingNumbers with: take 3 countingNumbers -> [1, 2, 3]
[1,2,3]

Testing countingNumbers with: take 5 countingNumbers -> [1, 2, 3, 4, 5]
[1,2,3,4,5]

----------------------------------------


Testing multiplesOfNumbers with: take 1 (multiplesOfNumbers 5) -> [5]
[5]

Testing multiplesOfNumbers with: take 5 (multiplesOfNumbers 2) -> [2, 4, 6, 8, 10]
[2,4,6,8,10]

----------------------------------------

Testing woodallNumbers with: take 1 woodallNumbers -> [1]
[1]

Testing woodallNumbers with: take 5 woodallNumbers -> [1, 7, 23, 63, 159]
[1,7,23,63,159]

----------------------------------------

Testing padovanNumbers with: take 2 padovanNumbers -> [1, 1]
[1,1]

Testing padovanNumbers with: take 10 padovanNumbers -> [1, 1, 1, 2, 2, 3, 4, 5, 7, 9]
[1,1,1,2,2,3,4,5,7,9]

----------------------------------------

Testing order with: order (<) (take 5 woodallNumbers) (take 5 (multiplesOfNumbers 2)) -> [1, 2, 4, 6, 7, 8, 10, 23, 63, 159]
[1,2,4,6,7,8,10,23,63,159]

----------------------------------------

Testing pairUp with: pairUp [] -> []
[]
Testing pairUp with: pairUp (take 3 countingNumbers) -> [[1, 2], [3]]
[[1,2],[3]]

Testing pairUp with: pairUp (take 5 countingNumbers) -> [[1, 2], [3, 4], [5]]
[[1,2],[3,4],[5]]

Testing pairUp with: pairUp (take 6 countingNumbers) -> [[1, 2], [3, 4], [5, 6]]
[[1,2],[3,4],[5,6]]

----------------------------------------

Testing runLengthEncoding with: runLengthEncoding [] -> []
[]

Testing runLengthEncoding with: runLengthEncoding [7] -> [(7,1)]
[(7,1)]

Testing runLengthEncoding with: runLengthEncoding [7, 7, 4, 7, 7, 7] -> [(7,2), (4, 1), (7, 3)]
[(7,2),(4,1),(7,3)]

Testing runLengthEncoding with: runLengthEncoding (take 10 padovanNumbers) -> [(1,3) (2,2), (3,1), (4,1), (5,1), (7,1), (9,1)]
[(1,3),(2,2),(3,1),(4,1),(5,1),(7,1),(9,1)]

----------------------------------------

Testing listPairApply with: listPairApply [(+),(*),(*),(*)] [] -> []
[]

Testing listPairApply with: listPairApply [(+),(*),(*)] (pairUp (take 6 countingNumbers)) -> [3, 12, 30]
[3,12,30]

Testing listPairApply with: listPairApply [(+),(*)] (pairUp (take 8 countingNumbers)) -> [3, 12, 11, 56]
[3,12,11,56]

----------------------------------------

Testing composeList with: composeList [add1, add2, add3] 3 -> 9
9
Testing composeList with: composeList [] 3 -> 3
3
Testing countingNumbers with: take 3 countingNumbers -> [1, 2, 3]
[1,2,3]

Testing countingNumbers with: take 5 countingNumbers -> [1, 2, 3, 4, 5]
[1,2,3,4,5]

----------------------------------------


Testing multiplesOfNumbers with: take 1 (multiplesOfNumbers 5) -> [5]
[5]

Testing multiplesOfNumbers with: take 5 (multiplesOfNumbers 2) -> [2, 4, 6, 8, 10]
[2,4,6,8,10]

----------------------------------------

Testing woodallNumbers with: take 1 woodallNumbers -> [1]
[1]

Testing woodallNumbers with: take 5 woodallNumbers -> [1, 7, 23, 63, 159]
[1,7,23,63,159]

----------------------------------------

Testing padovanNumbers with: take 2 padovanNumbers -> [1, 1]
[1,1]

Testing padovanNumbers with: take 10 padovanNumbers -> [1, 1, 1, 2, 2, 3, 4, 5, 7, 9]
[1,1,1,2,2,3,4,5,7,9]

----------------------------------------

Testing order with: order (<) (take 5 woodallNumbers) (take 5 (multiplesOfNumbers 2)) -> [1, 2, 4, 6, 7, 8, 10, 23, 63, 159]
[1,2,4,6,7,8,10,23,63,159]

----------------------------------------

Testing pairUp with: pairUp [] -> []
[]
Testing pairUp with: pairUp (take 3 countingNumbers) -> [[1, 2], [3]]
[[1,2],[3]]

Testing pairUp with: pairUp (take 5 countingNumbers) -> [[1, 2], [3, 4], [5]]
[[1,2],[3,4],[5]]

Testing pairUp with: pairUp (take 6 countingNumbers) -> [[1, 2], [3, 4], [5, 6]]
[[1,2],[3,4],[5,6]]

----------------------------------------

Testing runLengthEncoding with: runLengthEncoding [] -> []
[]

Testing runLengthEncoding with: runLengthEncoding [7] -> [(7,1)]
[(7,1)]

Testing runLengthEncoding with: runLengthEncoding [7, 7, 4, 7, 7, 7] -> [(7,2), (4, 1), (7, 3)]
[(7,2),(4,1),(7,3)]

Testing runLengthEncoding with: runLengthEncoding (take 10 padovanNumbers) -> [(1,3) (2,2), (3,1), (4,1), (5,1), (7,1), (9,1)]
[(1,3),(2,2),(3,1),(4,1),(5,1),(7,1),(9,1)]

----------------------------------------

Testing listPairApply with: listPairApply [(+),(*),(*),(*)] [] -> []
[]

Testing listPairApply with: listPairApply [(+),(*),(*)] (pairUp (take 6 countingNumbers)) -> [3, 12, 30]
[3,12,30]

Testing listPairApply with: listPairApply [(+),(*)] (pairUp (take 8 countingNumbers)) -> [3, 12, 11, 56]
[3,12,11,56]

----------------------------------------

Testing composeList with: composeList [add1, add2, add3] 3 -> 9
9
Testing composeList with: composeList [] 3 -> 3
3
